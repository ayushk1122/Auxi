from flask import Flask, request, jsonify, redirect, session
from flask_cors import CORS
import os
import requests
import json
from dotenv import load_dotenv
import openai
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import re

# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app, supports_credentials=True)

# Set OpenAI API key
openai.api_key = os.getenv('OPENAI_API_KEY')

# Spotify API credentials
SPOTIFY_CLIENT_ID = os.getenv('SPOTIFY_CLIENT_ID')
SPOTIFY_CLIENT_SECRET = os.getenv('SPOTIFY_CLIENT_SECRET')
SPOTIFY_REDIRECT_URI = os.getenv('SPOTIFY_REDIRECT_URI')

# Spotify OAuth scopes
SCOPES = [
    'user-read-private',
    'user-read-email',
    'playlist-modify-public',
    'playlist-modify-private',
    'user-library-read',
    'user-top-read'
]

@app.route('/api/login')
def login():
    """Initiate Spotify OAuth flow"""
    sp_oauth = SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope=' '.join(SCOPES)
    )
    auth_url = sp_oauth.get_authorize_url()
    return jsonify({'url': auth_url})

@app.route('/api/callback')
def callback():
    """Handle Spotify OAuth callback"""
    code = request.args.get('code')
    if not code:
        return jsonify({'error': 'No code provided'}), 400

    sp_oauth = SpotifyOAuth(
        client_id=SPOTIFY_CLIENT_ID,
        client_secret=SPOTIFY_CLIENT_SECRET,
        redirect_uri=SPOTIFY_REDIRECT_URI,
        scope=' '.join(SCOPES)
    )
    
    try:
        token_info = sp_oauth.get_access_token(code)
        return jsonify({
            'access_token': token_info['access_token'],
            'refresh_token': token_info['refresh_token'],
            'expires_in': token_info['expires_in']
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 400

@app.route('/api/generate-playlist', methods=['POST'])
def generate_playlist():
    """Generate song recommendations and create a Spotify playlist."""
    try:
        data = request.get_json()
        prompt = data.get('prompt')
        access_token = data.get('access_token')

        if not prompt or not access_token:
            return jsonify({'error': 'Missing prompt or access token'}), 400

        # Initialize Spotify client
        sp = spotipy.Spotify(auth=access_token)
        
        # Get user profile
        user = sp.current_user()
        print(f"Creating playlist for user: {user['id']}")

        # Create a new playlist
        playlist_name = f"AI Generated: {prompt[:30]}..."
        playlist_description = f"Playlist generated by AI based on: {prompt}"
        
        playlist_data = {
            'name': playlist_name,
            'description': playlist_description,
            'public': True
        }
        print(f"Creating playlist with data: {playlist_data}")
        
        try:
            playlist = sp.user_playlist_create(
                user=user['id'],
                name=playlist_name,
                description=playlist_description,
                public=True
            )
            print(f"Successfully created playlist: {playlist_name}")
            print(f"Playlist ID: {playlist['id']}")
            print(f"Playlist URL: {playlist['external_urls']['spotify']}")
        except Exception as e:
            print(f"Error creating playlist: {str(e)}")
            print(f"Error type: {type(e)}")
            raise

        # Get song recommendations from OpenAI using gpt-3.5-turbo
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": "You are a music expert that helps create playlists based on user descriptions. For each song recommendation, provide the song name and artist in the format: 'Song Name - Artist'. Return exactly 10 songs, one per line."
                },
                {
                    "role": "user",
                    "content": f"Create a playlist based on this description: {prompt}"
                }
            ],
            temperature=0.7,
            max_tokens=500
        )
        
        # Extract song recommendations
        recommendations = response.choices[0].message.content.strip().split('\n')
        recommendations = [r.strip() for r in recommendations if r.strip()]
        
        # Search for each song on Spotify and collect URIs
        track_uris = []
        for song in recommendations:
            try:
                # Remove any numbering (e.g., "1. ", "2. ", etc.)
                song = re.sub(r'^\d+\.\s*', '', song)
                
                # Extract song name and artist
                if ' - ' in song:
                    song_name, artist = song.split(' - ', 1)
                    # Clean up the song name and artist
                    song_name = song_name.strip().strip('"')
                    artist = artist.strip()
                    
                    # Try different search strategies
                    search_queries = [
                        f"track:{song_name} artist:{artist}",  # Exact match
                        f"{song_name} {artist}",              # Simple combination
                        song_name                             # Just the song name
                    ]
                    
                    found = False
                    for query in search_queries:
                        results = sp.search(q=query, type="track", limit=1)
                        if results['tracks']['items']:
                            track = results['tracks']['items'][0]
                            track_uris.append(track['uri'])
                            print(f"Found track: {song} -> {track['uri']} (using query: {query})")
                            found = True
                            break
                    
                    if not found:
                        print(f"Could not find track: {song}")
                else:
                    print(f"Invalid song format: {song}")
            except Exception as e:
                print(f"Error searching for song {song}: {str(e)}")
                continue

        # Add tracks to the playlist if we found any
        if track_uris:
            try:
                sp.playlist_add_items(playlist['id'], track_uris)
                print(f"Added {len(track_uris)} tracks to playlist")
            except Exception as e:
                print(f"Error adding tracks to playlist: {str(e)}")
        else:
            print("No tracks found to add to playlist")

        return jsonify({
            'recommendations': recommendations,
            'playlist_url': playlist['external_urls']['spotify']
        })

    except Exception as e:
        print(f"Error in generate_playlist: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True) 